service: 
  name: currence-backend
  profile: currence-admin
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TOKEN_SECRET: PragueOkaikweiTeriPetrolulAwful
    CURRENCE_USERS_TABLE: CURRENCE_USERS_TABLE # ${self:service}-${opt:stage, self:provider.stage}
    CURRENCE_STATUSES_TABLE: CURRENCE_STATUSES_TABLE # ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchGet
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CURRENCE_USERS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchGet
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CURRENCE_STATUSES_TABLE}"


functions:
  signin:
    handler: ./functions/auth/signin.signin
    description: Signs a user into the app
    events:
      - http:
          method: post
          cors: true # <-- CORS!
          path: signin
          request:
            passThrough: WHEN_NO_TEMPLATES
  signup:
    handler: ./functions/auth/signup.signup
    description: Signs a new user up for the app
    events:
      - http:
          method: post
          cors: true # <-- CORS!
          path: signup
          request:
            passThrough: WHEN_NO_TEMPLATES
  getUser:
    handler: ./functions/util/getUser.getUser
    description: Gets user
    events:
      - http:
          method: get 
          cors: true # <-- CORS!
          path: user
          request:
            passThrough: WHEN_NO_TEMPLATES
  getFeed:
    handler: ./functions/feed/index.getFeed
    description: Gets feed of a user
    events:
      - http:
          method: get
          cors: true # <-- CORS!
          path: feed
          request:
            passThrough: WHEN_NO_TEMPLATES
  getStory:
    handler: ./functions/story/index.getStory
    description: Gets story of a user
    events:
      - http:
          method: get
          cors: true # <-- CORS!
          path: story
          request:
            passThrough: WHEN_NO_TEMPLATES
  getFollowers:
    handler: ./functions/followers/index.getFollowers
    description: Gets a users followers
    events:
      - http:
          method: get
          cors: true # <-- CORS!
          path: followers
          request:
            passThrough: WHEN_NO_TEMPLATES
  getFollowing:
    handler: ./functions/following/index.getFollowing
    description: Gets following of a user
    events:
      - http:
          method: get
          cors: true # <-- CORS!
          path: following
          request:
            passThrough: WHEN_NO_TEMPLATES
  follow:
    handler: ./functions/follow/index.follow
    description: Follow a user.
    events:
      - http:
          method: post
          cors: true # <-- CORS!
          path: follow
          request:
            passThrough: WHEN_NO_TEMPLATES
  unfollow:
    handler: ./functions/unfollow/index.unfollow
    description: Unfollow a user. 
    events:
      - http:
          method: post
          cors: true # <-- CORS!
          path: unfollow
          request:
            passThrough: WHEN_NO_TEMPLATES
  isFollowing:
    handler: ./functions/util/isFollowing.isFollowing
    description: Returns a boolean indicating whether a user is a follower of another user
    events:
      - http:
          method: get
          cors: true # <-- CORS!
          path: isFollowing
          request:
            passThrough: WHEN_NO_TEMPLATES
  createStatus:
    handler: ./functions/status/createStatus.createStatus
    description: Creates a status.
    events:
      - http:
          method: post
          cors: true # <-- CORS!
          path: status
          request:
            passThrough: WHEN_NO_TEMPLATES
  isValidAlias:
    handler: ./functions/util/isValidAlias.isValidAlias
    description: Returns a boolean indicating whether an alias is valid or not
    events:
      - http:
          method: get
          cors: true # <-- CORS!
          path: alias
          request:
            passThrough: WHEN_NO_TEMPLATES



# resources:
#   Resources:
#     CurrenceUsersTable:
#       Type: AWS::DynamoDB::Table
#       DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#           - 
#             AttributeName: alias
#             AttributeType: S
#           - 
#             AttributeName: password
#             AttributeType: S
#           - 
#             AttributeName: picture
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.CURRENCE_USERS_TABLE}
#     CurrenceStatusesTable:
#       Type: AWS::DynamoDB::Table
#       DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#           - 
#             AttributeName: alias
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.CURRENCE_STATUSES_TABLE}